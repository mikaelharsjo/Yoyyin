//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using Yoyyin.Data.Core;
using Yoyyin.Data.Core.Entities;


namespace Yoyyin.Data
{
    public partial class SniHead : ISniHead
    {
        #region Primitive Properties
    
        public virtual string SniHeadID
        {
            get;
            set;
        }
    
        public virtual string Title
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<SniItem> SniItem
        {
            get
            {
                if (_sniItem == null)
                {
                    var newCollection = new FixupCollection<SniItem>();
                    newCollection.CollectionChanged += FixupSniItem;
                    _sniItem = newCollection;
                }
                return _sniItem;
            }
            set
            {
                if (!ReferenceEquals(_sniItem, value))
                {
                    var previousValue = _sniItem as FixupCollection<SniItem>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSniItem;
                    }
                    _sniItem = value;
                    var newValue = value as FixupCollection<SniItem>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSniItem;
                    }
                }
            }
        }
        private ICollection<SniItem> _sniItem;
    
        public virtual ICollection<User> User
        {
            get
            {
                if (_user == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupUser;
                    _user = newCollection;
                }
                return _user;
            }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUser;
                    }
                    _user = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUser;
                    }
                }
            }
        }
        private ICollection<User> _user;

        #endregion
        #region Association Fixup
    
        private void FixupSniItem(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SniItem item in e.NewItems)
                {
                    item.SniHead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SniItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.SniHead, this))
                    {
                        item.SniHead = null;
                    }
                }
            }
        }
    
        private void FixupUser(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    item.SniHead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (ReferenceEquals(item.SniHead, this))
                    {
                        item.SniHead = null;
                    }
                }
            }
        }

        #endregion
    }
}
