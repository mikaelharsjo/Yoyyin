// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["views/registration/step", "text!templates/registration/location.htm", "mustache"], function(StepView, template, mustache) {
    var Location;
    return Location = (function(_super) {

      __extends(Location, _super);

      function Location() {
        this.getPositonErrorHandler = __bind(this.getPositonErrorHandler, this);
        return Location.__super__.constructor.apply(this, arguments);
      }

      Location.prototype.getPosition = function(callback) {
        this.callback = callback;
        return navigator.geolocation.getCurrentPosition(this.geoCodeCoords, this.getPositonErrorHandler);
      };

      Location.prototype.getPositonErrorHandler = function() {
        return this.callback();
      };

      Location.prototype.geoCodeCoords = function(position) {
        var geoCoder, latlng;
        latlng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
        geoCoder = new google.maps.Geocoder();
        return geoCoder.geocode({
          location: latlng
        }, displayResults);
      };

      Location.prototype.displayResults = function(results, status) {
        var latLng, location, map, mapOptions, marker, parts;
        parts = results[0].address_components;
        location = {
          Street: parts[1].long_name + " " + parts[0].long_name,
          City: parts[2].long_name,
          Country: parts[3].long_name,
          ZipCode: parts[4].long_name,
          Latitude: results[0].geometry.location.lat(),
          Longitude: results[0].geometry.location.lng()
        };
        this.callback(location);
        latLng = new google.maps.LatLng(location.Latitude, location.Longitude);
        mapOptions = {
          center: latLng,
          zoom: 12,
          mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        map = new google.maps.Map(document.getElementById("registerMap"), mapOptions);
        return marker = new google.maps.Marker({
          position: latLng,
          map: map,
          title: "Här kommer du att visas"
        });
      };

      Location.prototype.render = function() {
        var _this = this;
        this.setHero({
          Headline: "Vilken adress ska användas för visning på karta?",
          Description: "Vi har hämtat adressen nedan från din nuvarande position. Vi använder bara denna för visning på karta och liknande i samband med sökningar."
        });
        return this.getPosition(function(data) {
          var btnMarkup, html;
          html = mustache.render(template, data || {});
          btnMarkup = "<a class='btn btn-warning' href='/#/userType'>Visa mig inte på kartor</a>";
          return _this.appendButtons({
            markup: html,
            previousStep: "wanted",
            nextStep: "userType",
            extraButtonMarkup: btnMarkup
          });
        });
      };

      Location.prototype.save = function() {
        this.model.set("Address", {
          City: this.$el.find("#city").val(),
          Country: this.$el.find("#country").val(),
          Street: this.$el.find("#street").val(),
          ZipCode: this.$el.find("#zipCode").val()
        });
        return console.log(this.model.toJSON());
      };

      return Location;

    })(StepView);
  });

}).call(this);
