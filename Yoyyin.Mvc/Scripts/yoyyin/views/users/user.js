// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["underscore", "backbone", "mustache", "models/user", "models/idea", "views/ideas/idea", "views/matching/dialogMatcher", "text!templates/User/image.htm", "text!templates/User/details.htm", "text!templates/Shared/idea.htm", "text!templates/Shared/userTypeLabel.htm", "text!templates/Shared/competenceLabel.htm", "text!templates/Shared/comment.htm", "views/users/newMessage"], function(_, backbone, mustache, UserModel, IdeaModel, IdeaView, DialogMatcher, imageTemplate, detailsTemplate, ideaTemplate, userTypeLabelTemplate, competenceLabelTemplate, commentTemplate, NewMessage) {
    var User;
    return User = (function(_super) {

      __extends(User, _super);

      function User() {
        return User.__super__.constructor.apply(this, arguments);
      }

      User.prototype.render = function() {
        var $ideaEl, comment, idea, ideaView, markup, model, user, _i, _j, _len, _len1, _ref, _ref1;
        user = this.model.toJSON();
        user.Image = mustache.render(imageTemplate, user);
        user.IdeasMarkup = "";
        _ref = user.Ideas;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          idea = _ref[_i];
          $ideaEl = $('<div>');
          model = new IdeaModel({
            model: idea
          });
          ideaView = new IdeaView({
            model: model,
            el: $ideaEl
          });
          ideaView.render();
          user.IdeasMarkup += $ideaEl.html();
          idea.CommentsMarkup = "<div class='page-header'><h2>Kommentarer. <small>H채r f책r man tycka vad man vill, men var sn채lla<small></h2></div>";
          _ref1 = idea.Comments;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            comment = _ref1[_j];
            idea.CommentsMarkup += mustache.render(commentTemplate, comment);
          }
          idea.CommentsMarkup += "<button class='btn'><i class='text-icon icon-comment'></i> L채gg till kommentar</button>";
          user.IdeasMarkup += mustache.render(ideaTemplate, idea);
        }
        markup = mustache.render(detailsTemplate, user);
        return this.$el.html(markup);
      };

      User.prototype.events = {
        "click button#match": "match",
        "click button#sendMessage": "sendMessage",
        "click button#addToFavorites": "addToFavorites"
      };

      User.prototype.match = function() {
        var view;
        return view = new DialogMatcher({
          userId: this.model.id
        });
      };

      User.prototype.sendMessage = function() {
        var view;
        view = new NewMessage();
        return view.render();
      };

      User.prototype.addToFavorites = function() {
        return console.log("adding to favorites");
      };

      return User;

    })(backbone.View);
  });

}).call(this);
