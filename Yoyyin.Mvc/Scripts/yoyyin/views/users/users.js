// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["backbone", "mustache", "collections/users", "text!templates/Shared/pageHeader.htm", "text!templates/User/container.htm", "text!templates/User/item.htm", "text!templates/Shared/competenceLabel.htm", "text!templates/User/image.htm", "text!templates/Shared/userTypeLabel.htm"], function(backbone, mustache, UserCollection, pageHeaderTemplate, containerTemplate, itemTemplate, competenceTemplate, imageTemplate, userTypeLabelTemplate) {
    var Users;
    return Users = (function(_super) {

      __extends(Users, _super);

      function Users() {
        return Users.__super__.constructor.apply(this, arguments);
      }

      Users.prototype.initialize = function() {
        return this.collection.on("change", this.render);
      };

      Users.prototype.render = function() {
        var markup;
        markup = mustache.render(pageHeaderTemplate, {
          Heading: "Personer",
          SubHeading: "Kanske din nästa affärspartner?"
        });
        this.collection.each(function(user) {
          var imageMarkup;
          user = user.toJSON();
          user.CompetencesNeededMarkup = "";
          $.each(user.CompetencesNeeded, function(index, competence) {
            return user.CompetencesNeededMarkup += mustache.to_html(competenceTemplate, {
              Competence: competence
            });
          });
          user.CompetencesMarkup = "";
          $.each(user.Competences, function(index, competence) {
            return user.CompetencesMarkup += mustache.to_html(competenceTemplate, {
              Competence: competence
            });
          });
          user.UserType = mustache.to_html(userTypeLabelTemplate, {
            Title: user.UserType
          });
          user.UserTypesNeededMarkup = "";
          $.each(user.UserTypesNeeded, function(index, userType) {
            return user.UserTypesNeededMarkup += mustache.to_html(userTypeLabelTemplate, {
              Title: userType
            });
          });
          imageMarkup = mustache.render(imageTemplate, {
            Src: user.ProfileImageSrc
          });
          user.ImageMarkup = imageMarkup;
          return markup += mustache.render(itemTemplate, user);
        });
        markup = mustache.to_html(containerTemplate, {
          items: markup
        });
        return this.$el.html(markup);
      };

      return Users;

    })(backbone.View);
  });

}).call(this);
